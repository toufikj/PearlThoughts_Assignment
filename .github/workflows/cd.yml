name: Build and Push Docker Image to ECR

on:
  workflow_dispatch:
    inputs:
      ecr-registry:
        description: 'The Amazon ECR registry URL'
        required: true
        type: string
        default: "783764579443.dkr.ecr.ap-south-1.amazonaws.com"
      ecr-repository:
        description: 'The Amazon ECR repository name'
        required: true
        type: string
        default: medusa
      aws-region:
        description: 'The AWS region'
        required: true
        type: string
        default: ap-south-1
      dockerfile-path:
        description: 'The path to the Dockerfile'
        required: true
        type: string
        default: ./medusa-docker/backend/
      

jobs:
  build:
    env:
      ECS_TASK_DEFINITION: "medusa-starter-default"
      CONTAINER_NAME: "medusa"
      
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ inputs.aws-region }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Clone Medusa Server
        run: |
          git clone https://github.com/Prn-Ice/medusa-docker
          cd medusa-docker
          git submodule update --init --recursive --remote
          ls -l

      - name: Create Dockerfile for Medusa
        run: |
          cd medusa-docker/backend
          ls -l
          cat <<EOF > ./Dockerfile
            # Set the base image to Node 17.1.0-alpine
            FROM node:17.1.0-alpine

            # Set the working directory
            WORKDIR /app/medusa

            # Copy the necessary files
            COPY package.json .
            COPY develop.sh .
            COPY yarn.* .

            # Run the apk update command to update package information
            RUN apk update

            # Install dependencies
            RUN yarn --network-timeout 1000000

            # Install the medusa-cli
            RUN yarn global add @medusajs/medusa-cli@latest

            # Add the remaining files
            COPY . .
            RUN yarn install
            # Set the default command to run when the container starts
            ENTRYPOINT ["sh", "develop.sh"]
          EOF
      
      
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.1.0
        with:
          context: ${{ inputs.dockerfile-path }}
          file: ${{ inputs.dockerfile-path }}/Dockerfile
          push: true
          tags: |
            ${{ inputs.ecr-registry }}/${{ inputs.ecr-repository }}

      - name: Get the Current ECS Task Definition
        id: get-task-def
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Render New ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.CONTAINER_NAME }}
          image: ${{ inputs.ecr-registry }}/${{ inputs.ecr-repository }}
          environment-variables: ${{ env.ECS_ENV_VARS }}
          secrets: ${{ env.ECS_SECRETS }}

      - name: Display Rendered Task Definition
        run: |
          echo "ðŸ“„ Rendered Task Definition:"
          cat ${{ steps.task-def.outputs.task-definition }}    
            
      - name: Deploy Amazon ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.ECS_SERVICE_NAME }}
          cluster: ${{ inputs.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
